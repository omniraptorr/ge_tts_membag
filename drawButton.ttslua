local getTransformScale = require("ge_tts/ObjectUtils").getTransformScale

-- lovingly ripped from https://github.com/tjakubo2/TTS_xwing/blob/2db37acb2960474f095fb8d47fa8654044af972e/Global.-1.ttslua#L3398
-- todo: check accuracy using button visualizer mod
---@type table<string, number>
local charWidthTable = {
    ['`'] = 2381, ['~'] = 2381, ['1'] = 1724, ['!'] = 1493, ['2'] = 2381,
    ['@'] = 4348, ['3'] = 2381, ['#'] = 3030, ['4'] = 2564, ['$'] = 2381,
    ['5'] = 2381, ['%'] = 3846, ['6'] = 2564, ['^'] = 2564, ['7'] = 2174,
    ['&'] = 2777, ['8'] = 2564, ['*'] = 2174, ['9'] = 2564, ['('] = 1724,
    ['0'] = 2564, [')'] = 1724, ['-'] = 1724, ['_'] = 2381, ['='] = 2381,
    ['+'] = 2381, ['q'] = 2564, ['Q'] = 3226, ['w'] = 3704, ['W'] = 4167,
    ['e'] = 2174, ['E'] = 2381, ['r'] = 1724, ['R'] = 2777, ['t'] = 1724,
    ['T'] = 2381, ['y'] = 2564, ['Y'] = 2564, ['u'] = 2564, ['U'] = 3030,
    ['i'] = 1282, ['I'] = 1282, ['o'] = 2381, ['O'] = 3226, ['p'] = 2564,
    ['P'] = 2564, ['['] = 1724, ['{'] = 1724, [']'] = 1724, ['}'] = 1724,
    ['|'] = 1493, ['\\'] = 1923, ['a'] = 2564, ['A'] = 2777, ['s'] = 1923,
    ['S'] = 2381, ['d'] = 2564, ['D'] = 3030, ['f'] = 1724, ['F'] = 2381,
    ['g'] = 2564, ['G'] = 2777, ['h'] = 2564, ['H'] = 3030, ['j'] = 1075,
    ['J'] = 1282, ['k'] = 2381, ['K'] = 2777, ['l'] = 1282, ['L'] = 2174,
    [';'] = 1282, [':'] = 1282, ['\''] = 855, ['"'] = 1724, ['z'] = 1923,
    ['Z'] = 2564, ['x'] = 2381, ['X'] = 2777, ['c'] = 1923, ['C'] = 2564,
    ['v'] = 2564, ['V'] = 2777, ['b'] = 2564, ['B'] = 2564, ['n'] = 2564,
    ['N'] = 3226, ['m'] = 3846, ['M'] = 3846, [','] = 1282, ['<'] = 2174,
    ['.'] = 1282, ['>'] = 2174, ['/'] = 1923, ['?'] = 2174, [' '] = 1282,
    ['avg'] = 2500
}
---@param str string
local function calcButtonWidth(str) -- Get real string length per char table.
    local len = 0
    for i = 1, #str do
        local c = str:sub(i,i)
        if charWidthTable[c] ~= nil then
            len = len + charWidthTable[c]
        else
            len = len + charWidthTable.avg
        end
    end
    return len / 10
end

local Coroutine = require("ge_tts/Coroutine")

function dummyFunc() end

local buttonScale = 0.001
-- local buttonScale = 0.00
local sizeFactor = 1

local rotThreshold = 2

---@alias trinary -1 | 0 | 1

---@shape axisAlign
---@field align nil | trinary
---@field position nil | trinary
---@field extra nil | number

local paramNames = {
    align = "align",
    pos = "pos",
    extra = "extra",
}

---@shape axesAlign
---@field x nil | axisAlign
---@field z nil | axisAlign

---@shape alignButtonParams
---@field position nil | axesAlign
---@field obj tts__Object

---@param params tts__CreateButtonParameters
---@param alignParams alignButtonParams
local function alignButton(params, alignParams)
    local buttonWidth = params.label and calcButtonWidth(--[[---@not nil]] params.label) * sizeFactor * 10
    local buttonHeight = params.height or (params.font_size or 100) * 1.1 * sizeFactor * 10
    local fontSize = 1000
    local finalScale = {1 / 10, 1, 1 / 10}

    local obj = alignParams.obj

    obj.hide_when_face_down = false
    obj.clearButtons()
    --Coroutine.yieldSeconds(0.2)
    -- do return end
    -- spawnObjectJSON({
    --     json              = marble.getJSON(),
    --     position          = center,
    -- })
    local positionParams = --[[---@not nil]] alignParams.position
    local pos = obj.getBounds().center
    pos.y = pos.y + obj.getBounds().size.y / 2 * (positionParams.y or 1) + 0.01 -- go to edge
    pos = obj.positionToLocal(pos) -- we now have the top center of bounding box in local coords
    local scale = Vector(getTransformScale(obj))
    local userScale = obj.getScale()
    local objSize = obj.getBoundsNormalized().size
    print(scale)
    print(userScale)
    print(obj.getName())
    scale:scale(userScale)
    --do return end
    --scale.x, scale.y, scale.z = userScale.x * scale.x, userScale.y * scale.y, userScale.z * scale.z
    print(obj.getName() .. " center is " .. tostring(pos) .. " scale is " .. tostring(scale))
    local xParams = --[[---@not nil]] positionParams.x
    local zParams =  positionParams.z

    --for axis, curParams in pairs(--[[---@not nil]] alignParams.position) do
    --    local value = pos[axis]
    --    for name, paramValue in pairs(--[[---@not nil]] curParams) do
    --        if name == paramNames.pos then
    --            value = value + objSize[axis] / 2 * paramValue or 0
    --        end
    --        if name == paramNames.align then
    --            value = buttonWidth * buttonScale * (xParams.position or 0) / scale.x or 0
    --        end
    --
    --    end
    --end

    local xAlign = xParams and (pos.x + objSize.x / 2 * (xParams.align or 0) / 10) or 0
    local xOffset = xParams and buttonWidth * buttonScale * (xParams.position or 0) / scale.x or 0
    pos.x = xAlign * -1 -- button x coords are flipped for some reason

    print("xs " .. buttonWidth, " scale ", tostring(scale.x), " align ", xAlign, " offset ", xOffset)
    --print("posx ", pos.x)

    -- pos.z = zParams and (pos.z + (obj.getBoundsNormalized().size.z / 2 * (zParams.align or 0)) + buttonHeight * buttonScale * (zParams.offset or 0)) / scale.z or 0

    -- local rot = obj.getRotation()
    -- ---@type boolean
    -- local faceDown
    -- if math.abs(rot.x) > 180 - rotThreshold then
    --     --print(obj.getName() .. "flipped x")
    --     pos.x = -pos.x
    --     faceDown = true
    -- end
    -- if math.abs(rot.z) > 180 - rotThreshold then
    --     --print(obj.getName() .. "flipped x")
    --     pos.z = -pos.z
    --     faceDown = true
    -- end
    -- if faceDown then
    --     --pos.y = -pos.y
    -- end

    obj.createButton({
        click_function = "dummyFunc",
        label          = params.label,
        position       = pos,
        -- position = {self.getBoundsNormalized()}
        rotation       = obj.is_face_down and {0,0,180} or {0,0,0},
        --scale          = {1 * scaleFactor * sizeFactor, 1, 1 * scaleFactor * sizeFactor},
        scale          = finalScale,
        width          = buttonWidth ,
        height         = buttonHeight,
        font_size      = fontSize,
        --width = buttonWidth,
        --height = buttonHeight,
        color          = "Red",
        font_color     = params.font_color,
        hover_color    = params.hover_color,
        press_color    = params.press_color,
        tooltip        = params.tooltip,
    })
    --print("buttonpos" .. tostring(obj.getButtons()[1].position))


    -- obj.UI.setXmlTable({
    --     { -- -100 * (obj.getBoundsNormalized().center.z + obj.getBoundsNormalized().size.z)
    --         tag = "Button",
    --         attributes = {
    --         -- position = pvec(center),
    --         position = pvec(center),
    --         width = tostring(buttonWidth),
    -- 		height = tostring(buttonHeight),
    --         color = "Black",
    --         },
    --     }
    -- })
end

return alignButton
